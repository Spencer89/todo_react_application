{"version":3,"sources":["TaskItem/TaskItem.js","AddNewTask/AddNewTask.js","OutstandingTaskCount/OutstandingTaskCount.js","App.js","serviceWorker.js","index.js"],"names":["TaskItem","className","id","rows","type","AddNewTask","placeholder","aria-label","aria-describedby","OutstandingTaskCount","props","count","App","useState","text","completed","tasks","activeTasks","filter","task","length","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SA2BeA,MAvBf,WACE,OACE,yBAAKC,UAAU,YACX,yBAAKA,UAAU,aACd,yBAAKA,UAAW,OAGb,yBAAKA,UAAY,mBAEjB,yBAAKA,UAAU,cACP,8BAAUA,UAAU,eAAeC,GAAG,8BAA8BC,KAAK,OAGzE,4BAAQC,KAAK,SAASH,UAAU,mBAAhC,UACA,4BAAQG,KAAK,SAASH,UAAU,kBAAhC,e,MCILI,MAlBf,WACE,OACE,yBAAKJ,UAAU,oBAGX,2BAAOG,KAAK,OAAOH,UAAU,eAAcK,YAAY,gCAAgCC,aAAW,uBAAuBC,mBAAiB,kBAC1I,yBAAKP,UAAU,sBACX,4BAAQA,UAAU,4BAA4BG,KAAK,SAASF,GAAG,iBAA/D,Q,MCIGO,MAXf,SAA8BC,GAC5B,OACE,yBAAKT,UAAU,wBACb,4BAAQA,UAAY,wBACpB,4BAAQG,KAAK,SAASH,UAAU,wCAAhC,mCAAuG,0BAAMA,UAAU,qBAAqBS,EAAMC,WC6BzIC,MA3Bf,WAAgB,IAAD,EAEaC,mBAAS,CACjC,CAACC,KAAK,oBAAqBC,WAAW,GACtC,CAACD,KAAM,eAAgBC,WAAW,GAClC,CAACD,KAAM,cAAeC,WAAW,KALtB,mBAENC,EAFM,KAQPC,GARO,KAQOD,EAAME,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,cAC9C,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAY,cACpB,iDAEA,8BAEE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAsBU,MAAQM,EAAYG,SAEzCJ,EAAMK,KAAI,SAAAF,GAAI,OAAG,kBAAC,EAAD,CAAUL,KAAQK,EAAKL,KAAMC,UAAYI,EAAKJ,kBClBpDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8458823.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TaskItem.css';\n\nfunction TaskItem() {\n  return (\n    <div className=\"TaskItem\">\n        <div className=\"container\">\n         <div className =\"row\">    \n           \n\n            <div className = \"col-12 col-md-4\">\n                \n            <div className=\"form-group\">\n                    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea>\n                </div>\n                \n                    <button type=\"button\" className=\"btn btn-success\">Done! </button>\n                    <button type=\"button\" className=\"btn btn-danger\">Delete</button>\n            </div>\n        </div>     \n       </div>\n      \n    </div>\n  );\n}\n\nexport default TaskItem;","import React from 'react';\n\nimport './AddNewTask.css';\n\nfunction AddNewTask() {\n  return (\n    <div className=\"input-group mb-3\">\n\n        \n        <input type=\"text\" className=\"form-control\"placeholder=\"Add something to your list...\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\n        <div className=\"input-group-append\">\n            <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">+</button>\n        </div>\n\n       \n    </div>      \n\n       \n         \n  );\n}\n\nexport default AddNewTask;","import React from 'react';\n\nimport './OutstandingTaskCount.css';\n\nfunction OutstandingTaskCount(props) {\n  return (\n    <div className=\"OutstandingTaskCount\">\n      <header className = \"OutstandingTaskCount\">\n      <button type=\"button\" className=\"btn btn-primary outstanding-task-btn\">Number of outstanding things... <span className=\"badge badge-light\">{props.count}</span>\n            </button>\n      </header>\n    </div>\n  );\n}\n\nexport default OutstandingTaskCount;","\nimport React, {useState} from 'react';\nimport TaskItem from\"./TaskItem/TaskItem\";\nimport AddNewTask from \"./AddNewTask/AddNewTask\";\nimport OutstandingTaskCount from \"./OutstandingTaskCount/OutstandingTaskCount\";\n\n\n\n\n\nfunction App() {\n \n  const [tasks, setTasks] = useState([\n    {text:\"Clean the kitchen\", completed: false},\n    {text: \"Mow the lawn\", completed: true},\n    {text: \"Make dinner\", completed: false}\n  ]);\n\n  const activeTasks = tasks.filter(task =>!task.completed);\n  return (\n    <div className=\"App\">\n      <header className = \"App-header\">\n      <h1>Get Things Done.</h1>\n      </header>\n      <body>\n\n        <AddNewTask />\n\n        <OutstandingTaskCount count= {activeTasks.length}/>\n\n        {tasks.map(task=> <TaskItem text = {task.text} completed= {task.completed}/>)}\n\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}